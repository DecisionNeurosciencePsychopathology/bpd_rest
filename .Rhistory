levels(df$roisort)
library(ggplot2)
ggplot(df, aes(x=roi, y=y)) + geom_point()
ggplot(df, aes(x=roisort, y=y)) + geom_point()
ggplot(df, aes(x=roisort, y=y)) + geom_point() + coord_flip()
df
#ps10 ggplot
data <- read.csv(file = "~/Downloads/SAT.csv")
attach(data)
data$W0 <- (SATV + SATM + RSATV + RSATM)/sqrt(4)
data$W_CC1 <- (-1*RSATM + -1*RSATV + SATV + SATM)/sqrt(4)
data$W_CC2 <- (-1*SATV + -1*RSATV + SATM + RSATM)/sqrt(4)
data$W_CC3 <- (-1*SATV + -1*RSATM + SATM + RSATV)/sqrt(4)
#######################################################
data$id <- rownames(data)
data$SAT_MS <- data$SATM
data$SAT_VS <- data$SATV
data$SAT_MA <- data$RSATM
data$SAT_VA <- data$RSATV
# Reshaping wide to long
data.long <- reshape(data = data,
varying = c("SAT_MS","SAT_VS",
"SAT_MA","SAT_VA"),
timevar=c("type"),
idvar="id",
direction="long", sep="_")
# Renaming our Type variable (making math vs. verbal and self-report vs. actual)
data.long$VM[data.long$type == "MS"] <- "math"
data.long$VM[data.long$type == "VS"] <- "verbal"
data.long$VM[data.long$type == "MA"] <- "math"
data.long$VM[data.long$type == "VA"] <- "verbal"
data.long$SR[data.long$type == "MS"] <- "selfrep"
data.long$SR[data.long$type == "VS"] <- "selfrep"
data.long$SR[data.long$type == "MA"] <- "actual"
data.long$SR[data.long$type == "VA"] <- "actual"
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
plot.data$SEX <- factor(plot.data$SEX_CC, labels = c("Male", "Female"))
ggplot(data = plot.data, aes(x = VM, y = SAT, fill = factor(SR))) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~SEX) +
scale_fill_brewer(palette = "Set1") +
theme_classic() +
theme(axis.text=element_text(size=10)) +
xlab("Score Type") +
ylab("SAT Score") +
scale_fill_discrete(name = "Report\nType", labels = c("Actual", "Self Report"))
library(Hmisc)
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
plot.data$SEX <- factor(plot.data$SEX_CC, labels = c("Male", "Female"))
ggplot(data = plot.data, aes(x = VM, y = SAT, fill = factor(SR))) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~SEX) +
scale_fill_brewer(palette = "Set1") +
theme_classic() +
theme(axis.text=element_text(size=10)) +
xlab("Score Type") +
ylab("SAT Score") +
scale_fill_discrete(name = "Report\nType", labels = c("Actual", "Self Report"))
library(Hmisc)
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
library(Rmisc)
install.packages(Rmisc)
install.packages("Rmisc")
library(Rmisc)
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
#ps10 ggplot
data <- read.csv(file = "~/Downloads/SAT.csv")
attach(data)
data$W0 <- (SATV + SATM + RSATV + RSATM)/sqrt(4)
data$W_CC1 <- (-1*RSATM + -1*RSATV + SATV + SATM)/sqrt(4)
data$W_CC2 <- (-1*SATV + -1*RSATV + SATM + RSATM)/sqrt(4)
data$W_CC3 <- (-1*SATV + -1*RSATM + SATM + RSATV)/sqrt(4)
SAT$SEX_CC[SEX=="1"] <- -1
SAT$SEX_CC[SEX=="2"] <- 1
#######################################################
data$id <- rownames(data)
data$SAT_MS <- data$SATM
data$SAT_VS <- data$SATV
data$SAT_MA <- data$RSATM
data$SAT_VA <- data$RSATV
# Reshaping wide to long
data.long <- reshape(data = data,
varying = c("SAT_MS","SAT_VS",
"SAT_MA","SAT_VA"),
timevar=c("type"),
idvar="id",
direction="long", sep="_")
# Renaming our Type variable (making math vs. verbal and self-report vs. actual)
data.long$VM[data.long$type == "MS"] <- "math"
data.long$VM[data.long$type == "VS"] <- "verbal"
data.long$VM[data.long$type == "MA"] <- "math"
data.long$VM[data.long$type == "VA"] <- "verbal"
data.long$SR[data.long$type == "MS"] <- "selfrep"
data.long$SR[data.long$type == "VS"] <- "selfrep"
data.long$SR[data.long$type == "MA"] <- "actual"
data.long$SR[data.long$type == "VA"] <- "actual"
library(Rmisc)
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
plot.data$SEX <- factor(plot.data$SEX_CC, labels = c("Male", "Female"))
ggplot(data = plot.data, aes(x = VM, y = SAT, fill = factor(SR))) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~SEX) +
scale_fill_brewer(palette = "Set1") +
theme_classic() +
theme(axis.text=element_text(size=10)) +
xlab("Score Type") +
ylab("SAT Score") +
scale_fill_discrete(name = "Report\nType", labels = c("Actual", "Self Report"))
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
data.long
data.long$SEX
#ps10 ggplot
data <- read.csv(file = "~/Downloads/SAT.csv")
attach(data)
data$W0 <- (SATV + SATM + RSATV + RSATM)/sqrt(4)
data$W_CC1 <- (-1*RSATM + -1*RSATV + SATV + SATM)/sqrt(4)
data$W_CC2 <- (-1*SATV + -1*RSATV + SATM + RSATM)/sqrt(4)
data$W_CC3 <- (-1*SATV + -1*RSATM + SATM + RSATV)/sqrt(4)
data$SEX_CC[SEX=="1"] <- -1
data$SEX_CC[SEX=="2"] <- 1
#######################################################
data$id <- rownames(data)
data$SAT_MS <- data$SATM
data$SAT_VS <- data$SATV
data$SAT_MA <- data$RSATM
data$SAT_VA <- data$RSATV
# Reshaping wide to long
data.long <- reshape(data = data,
varying = c("SAT_MS","SAT_VS",
"SAT_MA","SAT_VA"),
timevar=c("type"),
idvar="id",
direction="long", sep="_")
# Renaming our Type variable (making math vs. verbal and self-report vs. actual)
data.long$VM[data.long$type == "MS"] <- "math"
data.long$VM[data.long$type == "VS"] <- "verbal"
data.long$VM[data.long$type == "MA"] <- "math"
data.long$VM[data.long$type == "VA"] <- "verbal"
data.long$SR[data.long$type == "MS"] <- "selfrep"
data.long$SR[data.long$type == "VS"] <- "selfrep"
data.long$SR[data.long$type == "MA"] <- "actual"
data.long$SR[data.long$type == "VA"] <- "actual"
data.long$SEX
library(Rmisc)
plot.data <- summarySE(data = data.long, measurevar = "SAT", groupvars = c("VM", "SR", "SEX_CC"))
plot.data$SEX <- factor(plot.data$SEX_CC, labels = c("Male", "Female"))
ggplot(data = plot.data, aes(x = VM, y = SAT, fill = factor(SR))) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~SEX) +
scale_fill_brewer(palette = "Set1") +
theme_classic() +
theme(axis.text=element_text(size=10)) +
xlab("Score Type") +
ylab("SAT Score") +
scale_fill_discrete(name = "Report\nType", labels = c("Actual", "Self Report"))
plot.data
data.long
data.long
data.long <- reshape(data = data,
varying = c("SAT_MS","SAT_VS",
"SAT_MA","SAT_VA"),
timevar=c("type"),
idvar="id",
direction="long", sep="_")
data
plot.data
data
rm(list = ls())
data1 <- read.csv("~/Box Sync/class/Data Analysis/II/Academic.csv")
data1
lm.simp <- lm(data1$SALARY~data1$PUB)
lm.simp
data1 <- read.csv("~/Box Sync/class/Data Analysis/II/Academic.csv")
head(data1)
library(car)
library(lmSupport)
source('http://psych.colorado.edu/~jclab/R/mcSummaryLM.R')
library(Rmisc)
library(ggplot2)
library(BaylorEdPsych)
library(aod)
library(psych)
mcSummary(lm.simp)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_abline()
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_line()
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth()
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm) + ylab("Publications") + xlab("Salary")
data1 <- read.csv("~/Box Sync/class/Data Analysis/II/Academic.csv")
head(data1)
library(car)
library(lmSupport)
source('http://psych.colorado.edu/~jclab/R/mcSummaryLM.R')
library(Rmisc)
library(ggplot2)
library(BaylorEdPsych)
library(aod)
library(psych)
lm.simp <- lm(data1$SALARY~data1$PUB)
mcSummary(lm.simp)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm) + ylab("Publications") + xlab("Salary")
lm.simp <- lm(data1$SALARY~data1$PUB)
mcSummary(lm.simp)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm) + xlab("Publications") + ylab("Salary")
lm.simp <- lm(data1$SALARY~ 1 + data1$PUB)
mcSummary(lm.simp)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm) + xlab("Publications") + ylab("Salary")
data1$CC_1 <- recode(data1$DEPART, '1' = 2, '2' = -1, '3' = -1)
?recode
data1$CC_1 <- recode(data1$DEPART, "'1' = 2, '2' = -1, '3' = -1")
data1$CC_1 <- recode(data1$DEPART, "c(2,3) = -1; else = 2")
data1$CC_1
data1$DEPART <- recode(data1$DEPART, "c(2,3) = -1; else = 2")
data1 <- read.csv("~/Box Sync/class/Data Analysis/II/Academic.csv")
data1$CC1 <- recode(data1$DEPART, "c(2,3) = -1; else = 2")
data1$DEPART
data1
data1$CC2 <- recode(data1$DEPART, "1 = 0; 2 = 1; 3 = -1")
data1
##create complete set of orthogonal contrasts
data1$CC1 <- recode(data1$DEPART, "c(2,3) = -1; else = 2")
data1$CC2 <- recode(data1$DEPART, "1 = 0; 2 = 1; 3 = -1")
ggplot(data1, aes(x = data1$DEPART, y = data1$SALARY)) + geom_bar()
ggplot(data1, aes(x = data1$DEPART, y = data1$SALARY))
summarise(data1)
summarise(data1$DEPART)
summariseSE(data1$DEPART)
library(aod)
summariseSE(data1$DEPART)
summarise.SE(data1$DEPART)
summarise.SE(data1$SALARY)
summarise(data1$SALARY)
summarise
?summarise
summarise(data1, SALARY)
ddply(data1, "DEPT", summarise, Sal = mean(SALARY))
ddply(data1, "DEPART", summarise, Sal = mean(SALARY))
plot.depart <- ddply(data1, "DEPART", summarise, Sal = mean(SALARY))
ggplot(plot.depart, aes(DEPART, Sal)) + geom_col
ggplot(plot.depart, aes(DEPART, Sal)) + geom_col()
ggplot(plot.depart, aes(DEPART, Sal)) + geom_col() + coord_cartesian(ylim = c(60000, 67000))
ggplot(plot.depart, aes(factor(DEPART), Sal)) + geom_col() + coord_cartesian(ylim = c(60000, 67000)) +xlab()
ggplot(plot.depart, aes(factor(DEPART), Sal)) + geom_col() + coord_cartesian(ylim = c(60000, 67000))
data$DEPART_lab <- recode(data1$DEPART, "1 = 'Psychology', 2 = 'Sociology', 3 = 'History'")
data$DEPART_lab <- recode(data1$DEPART, "1 = 'Psychology'; 2 = 'Sociology'; 3 = 'History'")
?recode
data1$DEPART_lab <- factor(data1$DEPART, labels = c("Psychology", "Sociology", "History"))
data1
plot.depart <- ddply(data1, "DEPART_lab", summarise, Sal = mean(SALARY))
plot.depart
ggplot(plot.depart, aes(DEPART_lab, Sal)) + geom_col() + coord_cartesian(ylim = c(60000, 67000))
ggplot(data = plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) + geom_bar(colour = "black", stat = "identiy") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE)
ggplot(data = plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) + geom_bar(colour = "black", stat = "identiy")
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) + geom_bar(colour = "black", stat = "identiy")
plot.depart
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal))#, fill = DEPART_lab)) + geom_bar(colour = "black", stat = "identiy")
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal)) +geom_bar(stat = "identity")#, fill = DEPART_lab)) + geom_bar(colour = "black", stat = "identiy")
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity")#, fill = DEPART_lab)) + geom_bar(colour = "black", stat = "identiy")
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE)
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE) + xlab("Department") + ylab("Salary")
data1$DEPART_lab <- factor(data1$DEPART, labels = c("Psychology", "Sociology", "History"))
plot.depart <- ddply(data1, "DEPART_lab", summarise, Sal = mean(SALARY))
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE) + xlab("Department") + ylab("Salary")
data1$DEPART_lab <- factor(data1$DEPART, labels = c("Psychology", "Sociology", "History"))
(plot.depart <- ddply(data1, "DEPART_lab", summarise, Sal = mean(SALARY)))
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE) + xlab("Department") + ylab("Salary")
lm.simp.depart <- lm(data1$SALARY ~ data1$CC1 + data1$CC2)
mcSummary(lm.simp.depart)
Anova(lm.simp.depart)
Anova(lm.simp.depart, type = 3)
mcSummary(lm.simp.depart)
summary(lm.simp.depart)
data1 <- read.csv("~/Box Sync/class/Data Analysis/II/Academic.csv")
head(data1)
library(car)
library(lmSupport)
source('http://psych.colorado.edu/~jclab/R/mcSummaryLM.R')
library(Rmisc)
library(ggplot2)
library(BaylorEdPsych)
library(aod)
library(psych)
lm.simp <- lm(data1$SALARY~ data1$PUB)
mcSummary(lm.simp)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm) + xlab("Publications") + ylab("Salary")
##create complete set of orthogonal contrasts
data1$CC1 <- recode(data1$DEPART, "")
data1$CC2 <- recode(data1$DEPART, "1 = 0; 2 = 1; 3 = -1")
data1$DEPART_lab <- factor(data1$DEPART, labels = c("Psychology", "Sociology", "History"))
(plot.depart <- ddply(data1, "DEPART_lab", summarise, Sal = mean(SALARY)))
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE) + xlab("Department") + ylab("Salary")
lm.simp.depart <- lm(data1$SALARY ~ data1$CC1 + data1$CC2)
mcSummary(lm.simp.depart)
data1 <- read.csv("~/Box Sync/class/Data Analysis/II/Academic.csv")
head(data1)
library(car)
library(lmSupport)
source('http://psych.colorado.edu/~jclab/R/mcSummaryLM.R')
library(Rmisc)
library(ggplot2)
library(BaylorEdPsych)
library(aod)
library(psych)
lm.simp <- lm(data1$SALARY~ data1$PUB)
mcSummary(lm.simp)
ggplot(data1, aes(x = data1$PUB, y = data1$SALARY)) + geom_point() + geom_smooth(method = lm) + xlab("Publications") + ylab("Salary")
##create complete set of orthogonal contrasts
data1$CC1 <- recode(data1$DEPART, "")
data1$CC2 <- recode(data1$DEPART, "1 = 0; 2 = 1; 3 = -1")
data1$DEPART_lab <- factor(data1$DEPART, labels = c("Psychology", "Sociology", "History"))
(plot.depart <- ddply(data1, "DEPART_lab", summarise, Sal = mean(SALARY)))
ggplot(plot.depart, aes(x = DEPART_lab, y = Sal, fill = DEPART_lab)) +geom_bar(stat = "identity") +
coord_cartesian(ylim = c(60000, 67000)) + guides(fill = FALSE) + xlab("Department") + ylab("Salary")
lm.simp.depart <- lm(data1$SALARY ~ data1$CC1 + data1$CC2)
mcSummary(lm.simp.depart)
setwd("/mnt/nth7_auto_gp/Research01/HallquistLab/PANDAA/03 - Behavioral/SL_paradigm")
library(R.matlab)
ex.mat.file <- readMat("008perblock_IOIO_run1_EEG.mat")
str(ex.mat.file)
do.call(cbind,ex.mat.file$SOC[,,1])
str(ex.mat.file$SOC[,,1]$when.stop)
########## RS_BPD_pipeline
####read in package dependencies and custom functions
setwd("~/Box Sync/DEPENd/Projects/RS_BPD_graph/bpd_rest/")
#setwd("/Users/mnh5174/Data_Analysis/bpd_rest")
basedir <- getwd()
source("functions/setup_globals.R") #this will setup details of the parcellation, conn_method, preproc_pipeline, and connection distance
source("functions/get_subj_info.R")
source("functions/calcGraph_binary.R")
source("functions/import_adj_mats.R")
source("functions/setup_graphs.R")
source("functions/setup_community.R")
source("functions/graph_util_redux.R")
source("functions/run_parse_deltacon.R")
source("functions/wibw_module_degree.R")
source("Infomap/infomap_communities.R")
source("functions/analyze_nodal_metrics_PCA_func.R")
#get_subj info here, includes motion exclusion procedure
subj_info <- get_subj_info(adjmats_base, parcellation, conn_method, preproc_pipeline, file_extension=".txt.gz")
table(subj_info[,c(4,8)])
#import raw adjacency matrices here (subj_info already contains the identified raw files)
allmats <- import_adj_mats(subj_info, rmShort = rmShort, allowCache=TRUE)
#obtain weighted, non-negative weighted, and density-thresholded binary graphs
gobjs <- setup_graphs(allmats, allowCache=TRUE)
#gobjs contains a list of weighted, non-negative weighted, and binary matrices
#pull these out into single variables for simplicity
allg <- gobjs$allg; allg_noneg <- gobjs$allg_noneg; allg_density <- gobjs$allg_density
rm(gobjs) #remove from environment to save memory
#estimate and setup community structure. note: currently pulling from MH's community structure, unclear how this was generated
# comm_d10_l <- run_community_detection_on_agg(allmats, "louvain", density=0.1)
community <- readRDS(paste0(getwd(), "/cache/d12_louv_n83.rds"))
allg_noneg <- assign_communities(allg_noneg, community, "community")
rm(list = ls())
########## RS_BPD_pipeline
####read in package dependencies and custom functions
setwd("~/Box Sync/DEPENd/Projects/RS_BPD_graph/bpd_rest/")
#setwd("/Users/mnh5174/Data_Analysis/bpd_rest")
basedir <- getwd()
source("functions/setup_globals.R") #this will setup details of the parcellation, conn_method, preproc_pipeline, and connection distance
source("functions/get_subj_info.R")
source("functions/calcGraph_binary.R")
source("functions/import_adj_mats.R")
source("functions/setup_graphs.R")
source("functions/setup_community.R")
source("functions/graph_util_redux.R")
source("functions/run_parse_deltacon.R")
source("functions/wibw_module_degree.R")
source("Infomap/infomap_communities.R")
source("functions/analyze_nodal_metrics_PCA_func.R")
#get_subj info here, includes motion exclusion procedure
subj_info <- get_subj_info(adjmats_base, parcellation, conn_method, preproc_pipeline, file_extension=".txt.gz")
table(subj_info[,c(4,8)])
#import raw adjacency matrices here (subj_info already contains the identified raw files)
allmats <- import_adj_mats(subj_info, rmShort = rmShort, allowCache=TRUE)
#obtain weighted, non-negative weighted, and density-thresholded binary graphs
gobjs <- setup_graphs(allmats, allowCache=TRUE)
#gobjs contains a list of weighted, non-negative weighted, and binary matrices
#pull these out into single variables for simplicity
allg <- gobjs$allg; allg_noneg <- gobjs$allg_noneg; allg_density <- gobjs$allg_density
rm(gobjs) #remove from environment to save memory
#estimate and setup community structure. note: currently pulling from MH's community structure, unclear how this was generated
# comm_d10_l <- run_community_detection_on_agg(allmats, "louvain", density=0.1)
community <- readRDS(paste0(getwd(), "/cache/d12_louv_n83.rds"))
allg_noneg <- assign_communities(allg_noneg, community, "community")
allg_density <- assign_communities(allg_density, community, "community")
#compute global metrics on density-thresholded graphs
globalmetrics_dthresh <- compute_global_metrics(allg_density, allowCache=TRUE, community_attr="community") #community_attr determines how global/nodal statistics that include community are computed
#compute nodal metrics on density-thresholded graphs
nodalmetrics_dthresh <- compute_nodal_metrics(allg_density, allowCache=TRUE, community_attr="community") #this returns allmetrics.nodal as nested list and allmetrics.nodal.df as flat data.frame
TRUE
##calculate group comparisons (PCA pipeline)
sig_PCA_nodes <- analyze_nodal_metrics_PCA(nodalmetrics_dthresh$allmetrics.nodal.df, allowCache = FALSE)
metrics.pca <- c("central", "within.mod", "between.node")
library(reshape2)
sig_PCA_nodes <- analyze_nodal_metrics_PCA(nodalmetrics_dthresh$allmetrics.nodal.df, allowCache = FALSE)
metrics.pca <- c("central", "within.mod", "between.node")
outputdir <- paste0(basedir, "/BNV_nodefiles/OHBM_files/")
stopifnot(file.exists(file.path(basedir, "BNV_nodefiles")))
stopifnot(file.exists(file.path(basedir, "cache")))
expectFile <- file.path(basedir, "cache", paste0("toanalyze.pca.", preproc_pipeline, ".", conn_method, ".csv"))
if(file.exists(expectFile)){
toanalyze <- read.csv(expectFile)
} else{message("toanalyze file is missing")}
metrics.pca <- metrics
bpd.main <- subset(signod.df, is.na(term))
bpd.main <- bpd.main[order(bpd.main$metric, bpd.main$nodenum),]
signod.df <- sig_PCA_nodes
bpd.main <- subset(signod.df, is.na(term))
bpd.main <- bpd.main[order(bpd.main$metric, bpd.main$nodenum),]
row.names(bpd.main) <- seq(1, length(bpd.main[,1]), 1)
bpd.main.all <- data.frame()
for(res in 1:length(bpd.main[,1])){
ss.bpd <- data.frame(subj_info[,c("BPD", "AgeAtScan")], metric = bpd.main[res,]$metric)
ss.bpd$metric.val <- select_(toanalyze[which(toanalyze$node == bpd.main[res,]$nodenum),], as.character(ss.bpd$metric[1]))
ss.bpd$metric.val <- as.numeric(as.matrix(ss.bpd$metric.val))
ss.bpd$BPD <- factor(ss.bpd$BPD, levels = c(0,1), labels = c("Control", "BPD"))
ss.bpd$roiname <- paste0("V_", bpd.main[res,]$nodenum, ": ", bpd.main[res,]$nodename)
ss.bpd$roinum <- bpd.main[res,]$nodenum
if(ss.bpd$metric[1] == "central"){
ss.bpd$metric.label <- "PC1: Eigenvector and Degree Centrality"
} else if(ss.bpd$metric[1] == "within.mod"){
ss.bpd$metric.label <- "PC2: Within Module Connectivity"
} else if(ss.bpd$metric[1] == "between.node"){
ss.bpd$metric.label <- "PC3: Betweenness Centrality"
}
colnames(ss.bpd) <- c("BPD", "AgeAtScan", "metric", "metric.val", "roiname", "roinum", "metric.label")
g <- ggplot(ss.bpd, aes(x = AgeAtScan, color=BPD, y = metric.val)) + geom_point() + stat_smooth(method="lm", se=FALSE)+
labs(x = "Age", y = as.character(ss.bpd$metric.label[1]), title = as.character(ss.bpd$roiname[1])) +scale_color_brewer("Group", palette="Set1") + theme(plot.title = element_text(hjust = 0.5))
plot(g)
bpd.main.all <- rbind(bpd.main.all, ss.bpd)
}
suppressMessages(library(ggplot2))
for(res in 1:length(bpd.main[,1])){
ss.bpd <- data.frame(subj_info[,c("BPD", "AgeAtScan")], metric = bpd.main[res,]$metric)
ss.bpd$metric.val <- select_(toanalyze[which(toanalyze$node == bpd.main[res,]$nodenum),], as.character(ss.bpd$metric[1]))
ss.bpd$metric.val <- as.numeric(as.matrix(ss.bpd$metric.val))
ss.bpd$BPD <- factor(ss.bpd$BPD, levels = c(0,1), labels = c("Control", "BPD"))
ss.bpd$roiname <- paste0("V_", bpd.main[res,]$nodenum, ": ", bpd.main[res,]$nodename)
ss.bpd$roinum <- bpd.main[res,]$nodenum
if(ss.bpd$metric[1] == "central"){
ss.bpd$metric.label <- "PC1: Eigenvector and Degree Centrality"
} else if(ss.bpd$metric[1] == "within.mod"){
ss.bpd$metric.label <- "PC2: Within Module Connectivity"
} else if(ss.bpd$metric[1] == "between.node"){
ss.bpd$metric.label <- "PC3: Betweenness Centrality"
}
colnames(ss.bpd) <- c("BPD", "AgeAtScan", "metric", "metric.val", "roiname", "roinum", "metric.label")
g <- ggplot(ss.bpd, aes(x = AgeAtScan, color=BPD, y = metric.val)) + geom_point() + stat_smooth(method="lm", se=FALSE)+
labs(x = "Age", y = as.character(ss.bpd$metric.label[1]), title = as.character(ss.bpd$roiname[1])) +scale_color_brewer("Group", palette="Set1") + theme(plot.title = element_text(hjust = 0.5))
plot(g)
bpd.main.all <- rbind(bpd.main.all, ss.bpd)
}
for (m in metrics.pca){
this.metric <- bpd.main.all[which(bpd.main.all$metric ==m), ]
this.metric$roiname <- factor(this.metric$roiname, levels = unique(this.metric$roiname))
g <- ggplot(this.metric, aes(x = factor(BPD), y = this.metric[,"metric.val"], color = BPD)) + stat_summary(fun.data="mean_cl_boot", size=1.5, fatten=1.5) + theme(legend.position="none") +   #fill = factor(BPD)
labs(x = "", y = this.metric$metric.label[1], title = "") + scale_x_discrete(breaks=c(0,1), labels=c("Control", "BPD"))  + facet_wrap(~roiname, scales="free_y")  +
theme_grey(base_size = 12) + theme(legend.title=element_blank(), strip.text = element_text(size=10)) + theme(legend.position="bottom")
plot(g)
}
m
g <- ggplot(this.metric, aes(x = factor(BPD), y = this.metric[,"metric.val"], color = BPD)) + stat_summary(fun.data="mean_cl_boot", size=1.5, fatten=1.5) + theme(legend.position="none") +   #fill = factor(BPD)
labs(x = "", y = this.metric$metric.label[1], title = "") + scale_x_discrete(breaks=c(0,1), labels=c("Control", "BPD"))  + facet_wrap(~roiname, scales="free_y")  +
theme_grey(base_size = 12) + theme(legend.title=element_blank(), strip.text = element_text(size=10)) + theme(legend.position="bottom")
plot(g)
m = "within.mod"
ggplot(this.metric, aes(x = factor(BPD), y = this.metric[,"metric.val"], color = BPD)) + stat_summary(fun.data="mean_cl_boot", size=1.5, fatten=1.5) + theme(legend.position="none") +   #fill = factor(BPD)
labs(x = "", y = this.metric$metric.label[1], title = "") + scale_x_discrete(breaks=c(0,1), labels=c("Control", "BPD"))  + facet_wrap(~roiname, scales="free_y")  +
theme_grey(base_size = 12) + theme(legend.title=element_blank(), strip.text = element_text(size=10)) + theme(legend.position="bottom")
this.metric <- bpd.main.all[which(bpd.main.all$metric ==m), ]
this.metric$roiname <- factor(this.metric$roiname, levels = unique(this.metric$roiname))
g <- ggplot(this.metric, aes(x = factor(BPD), y = this.metric[,"metric.val"], color = BPD)) + stat_summary(fun.data="mean_cl_boot", size=1.5, fatten=1.5) + theme(legend.position="none") +   #fill = factor(BPD)
labs(x = "", y = this.metric$metric.label[1], title = "") + scale_x_discrete(breaks=c(0,1), labels=c("Control", "BPD"))  + facet_wrap(~roiname, scales="free_y")  +
theme_grey(base_size = 12) + theme(legend.title=element_blank(), strip.text = element_text(size=10)) + theme(legend.position="bottom")
plot(g)
pdf(file = paste0(outputdir, "bpd_main_plot_PCA.pdf"), width=10, height=7)
for(res in 1:length(bpd.main[,1])){
ss.bpd <- data.frame(subj_info[,c("BPD", "AgeAtScan")], metric = bpd.main[res,]$metric)
ss.bpd$metric.val <- select_(toanalyze[which(toanalyze$node == bpd.main[res,]$nodenum),], as.character(ss.bpd$metric[1]))
ss.bpd$metric.val <- as.numeric(as.matrix(ss.bpd$metric.val))
ss.bpd$BPD <- factor(ss.bpd$BPD, levels = c(0,1), labels = c("Control", "BPD"))
ss.bpd$roiname <- paste0("V_", bpd.main[res,]$nodenum, ": ", bpd.main[res,]$nodename)
ss.bpd$roinum <- bpd.main[res,]$nodenum
if(ss.bpd$metric[1] == "central"){
ss.bpd$metric.label <- "PC1: Eigenvector and Degree Centrality"
} else if(ss.bpd$metric[1] == "within.mod"){
ss.bpd$metric.label <- "PC2: Within Module Connectivity"
} else if(ss.bpd$metric[1] == "between.node"){
ss.bpd$metric.label <- "PC3: Betweenness Centrality"
}
colnames(ss.bpd) <- c("BPD", "AgeAtScan", "metric", "metric.val", "roiname", "roinum", "metric.label")
g <- ggplot(ss.bpd, aes(x = AgeAtScan, color=BPD, y = metric.val)) + geom_point() + stat_smooth(method="lm", se=FALSE)+
labs(x = "Age", y = as.character(ss.bpd$metric.label[1]), title = as.character(ss.bpd$roiname[1])) +scale_color_brewer("Group", palette="Set1") + theme(plot.title = element_text(hjust = 0.5))
plot(g)
bpd.main.all <- rbind(bpd.main.all, ss.bpd)
}
for (m in metrics.pca){
this.metric <- bpd.main.all[which(bpd.main.all$metric ==m), ]
this.metric$roiname <- factor(this.metric$roiname, levels = unique(this.metric$roiname))
g <- ggplot(this.metric, aes(x = factor(BPD), y = this.metric[,"metric.val"], color = BPD)) + stat_summary(fun.data="mean_cl_boot", size=1.5, fatten=1.5) + theme(legend.position="none") +   #fill = factor(BPD)
labs(x = "", y = this.metric$metric.label[1], title = "") + scale_x_discrete(breaks=c(0,1), labels=c("Control", "BPD"))  + facet_wrap(~roiname, scales="free_y")  +
theme_grey(base_size = 12) + theme(legend.title=element_blank(), strip.text = element_text(size=10)) + theme(legend.position="bottom")
plot(g)
}
dev.off()
