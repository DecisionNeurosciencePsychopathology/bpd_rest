fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
browser()
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
a <- MotionInfoSPECC(lab_ics, 0.5)
dir.notfound
print(dir.notfound)
cat("MR_dir not found:", dir.notfound$SPECC_ID)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
MotionInfoSPECC <- function(dir, thresh = NULL){
##thresh indicates what specifies a significant head movement
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
max = max(this.sub.fd$FD),
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
num_volumes = length(this.sub.fd$FD))
if(!(thissub.desc$num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
a <- MotionInfoSPECC(lab_ics, 0.5)
MotionInfoSPECC <- function(dir, thresh, prop.spikes, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD),
maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
if(!(thissub.desc$num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD),
maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
max(this.sub.fd$FD)
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD),
maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD),
maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
prop.thresh
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD)
prop.thresh
MotionInfoSPECC(lab_ics, 0.5, .30, 10)
MotionInfoSPECC <- function(dir, thresh, prop.spikes, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD), maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
if(!(thissub.desc$num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
MotionInfoSPECC(lab_ics, 0.5, .30, 10)
maxFD = max(this.sub.fd$FD)
maxFD
MotionInfoSPECC <- function(dir, thresh, prop.spikes, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD), maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
if(!(thissub.desc$num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
MotionInfoSPECC(lab_ics, 0.5, .30, 10)
a <- MotionInfoSPECC(lab_ics, 0.5, .30, 10)
a$fd.info
max.exclude
MotionInfoSPECC <- function(dir, thresh, prop.spikes, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
browser()
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD), maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
if(!(thissub.desc$num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
a <- MotionInfoSPECC(lab_ics, 0.5, .30, 10)
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),
meanFD = mean(this.sub.fd$FD), maxFD = max(this.sub.fd$FD),
maxExclude = if(maxFD > max.exclude) 1 else 0,
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD),
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0,
num_volumes = length(this.sub.fd$FD))
thissub.desc
this.sub.fd$FD
meanFD = mean(this.sub.fd$FD)
meanFD
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),meanFD)
thissub.desc
###################################################################################
##Graph Utility Functions: NodeFile(), tagGraph(), plotMetricQuant(), getMotionInfo()
##HeadMotionCleanSPECC: function pulls motion info from specified dir and exports as a data frame coded by subject number
MotionInfoSPECC <- function(dir, thresh, prop.spikes, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
browser()
meanFD = mean(this.sub.fd$FD)
maxFD = max(this.sub.fd$FD)
maxExclude = if(maxFD > max.exclude) 1 else 0
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD)
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0
num_volumes = length(this.sub.fd$FD)
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),meanFD, maxFD, maxExclude, prop.thresh, thresh.exclude, num_volumes)
if(!(num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
a <- MotionInfoSPECC(lab_ics, 0.5, .30, 10)
MotionInfoSPECC <- function(dir, thresh, prop.spikes, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
# browser()
meanFD = mean(this.sub.fd$FD)
maxFD = max(this.sub.fd$FD)
maxExclude = if(maxFD > max.exclude) 1 else 0
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD)
thresh.exclude = if(prop.thresh > prop.spikes) 1 else 0
num_volumes = length(this.sub.fd$FD)
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),meanFD, maxFD, maxExclude, prop.thresh, thresh.exclude, num_volumes)
if(!(num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
a <- MotionInfoSPECC(lab_ics, 0.5, .30, 10)
a$fd.info
MotionInfoSPECC <- function(dir, thresh, spikes.exclude, max.exclude){
##thresh indicates what specifies a significant head movement
##spikes.exclude specifies the cutoff for the proportion of movements above the threshold at which to exclude a given subject
##max.exclude is similar to spikes.exclude, but sets a cutoff for large head movements
require(plyr); require(dplyr); require(tidyr)
options(dplyr.width=200)
return_list <- list()
idfile <- paste0(dir, "/SPECC/SPECC_Participant_Info.csv")
idinfo <- read.csv(idfile)
## MH has now converted all SPECC MR directory names to all lower case to allow for match on case-sensitive filesystem
## and to make the naming consistent
##pull subject folders
idinfo <- idinfo %>% select(-Notes) %>% rowwise() %>% mutate(mr_dir=ifelse(LunaMRI==1,
paste0(dir, "/MMClock/MR_Proc/", Luna_ID, "_", format((as.Date(ScanDate, format="%Y-%m-%d")), "%Y%m%d")), #convert to Date, then reformat YYYYMMDD
paste0(dir, "/SPECC/MR_Proc/", tolower(SPECC_ID), "_", tolower(format((as.Date(ScanDate, format="%Y-%m-%d")), "%d%b%Y")))))
##pull fd info into dataframe
fd.info.raw <- data.frame()
fd.info <- data.frame()
fd.notfound <- data.frame()
for(id in idinfo$NUM_ID){
thissub <- idinfo[which(idinfo$NUM_ID == id),]
if(file.exists(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))){
#this.sub.fd <- t(data.frame(read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt"))))
#rownames(this.sub.fd) <- as.character(thissub$SPECC_ID)
this.sub.fd <- data.frame(as.character(thissub$SPECC_ID), read.table(paste0(thissub$mr_dir, "/mni_5mm_wavelet/rest1/motion_info/fd.txt")))
colnames(this.sub.fd) <- c("Subj", "FD")
# browser()
meanFD = mean(this.sub.fd$FD)
maxFD = max(this.sub.fd$FD)
maxExclude = if(maxFD > max.exclude) 1 else 0
prop.thresh = sum(this.sub.fd$FD > thresh)/length(this.sub.fd$FD)
thresh.exclude = if(prop.thresh > spikes.exclude) 1 else 0
num_volumes = length(this.sub.fd$FD)
thissub.desc <- data.frame(Subj = as.character(thissub$SPECC_ID),meanFD, maxFD, maxExclude, prop.thresh, thresh.exclude, num_volumes)
if(!(num_volumes==300)){cat("Subject ", as.character(thissub$SPECC_ID), " does not have the standard number of volumes", "\n")}
fd.info <- rbind(fd.info, thissub.desc)
fd.info.raw <- rbind(fd.info.raw, this.sub.fd)
} else{
fd.notfound <- rbind(fd.notfound, data.frame(thissub))
cat("FD.txt file not found for subject: ", as.character(thissub$SPECC_ID), "\n")
}
}
#verify that mr_dir is present as expected, if not, store in dir.notfound
idinfo$dirfound <- file.exists(idinfo$mr_dir)
dir.notfound <- subset(idinfo, dirfound==FALSE)
cat("MR_dir not found:", as.character(dir.notfound$SPECC_ID))
return_list[["dir.notfound"]] <- data.frame(dir.notfound)
return_list[["fd.txt.notfound"]] <- fd.notfound
return_list[["fd.info.raw"]] <- fd.info.raw
return_list[["fd.info"]] <- fd.info
return(return_list)
}
a <- MotionInfoSPECC(lab_ics, 0.5, .20, 10)
########## RS_BPD_pipeline
####read in package dependencies and custom functions
setwd("~/Box Sync/DEPENd/Projects/RS_BPD_graph/bpd_rest/")
#setwd("/Users/mnh5174/Data_Analysis/bpd_rest")
basedir <- getwd()
source("functions/setup_globals.R") #this will setup details of the parcellation, conn_method, preproc_pipeline, and connection distance
source("functions/get_subj_info.R")
source("functions/calcGraph_binary.R")
source("functions/import_adj_mats.R")
source("functions/setup_graphs.R")
source("functions/setup_community.R")
source("functions/graph_util_redux.R")
source("functions/run_parse_deltacon.R")
source("functions/wibw_module_degree.R")
source("Infomap/infomap_communities.R")
#get_subj info here, includes motion exclusion procedure
subj_info <- get_subj_info(adjmats_base, parcellation, conn_method, preproc_pipeline, file_extension=".txt.gz")
########## RS_BPD_pipeline
####read in package dependencies and custom functions
setwd("~/Box Sync/DEPENd/Projects/RS_BPD_graph/bpd_rest/")
#setwd("/Users/mnh5174/Data_Analysis/bpd_rest")
basedir <- getwd()
source("functions/setup_globals.R") #this will setup details of the parcellation, conn_method, preproc_pipeline, and connection distance
source("functions/get_subj_info.R")
source("functions/calcGraph_binary.R")
source("functions/import_adj_mats.R")
source("functions/setup_graphs.R")
source("functions/setup_community.R")
source("functions/graph_util_redux.R")
source("functions/run_parse_deltacon.R")
source("functions/wibw_module_degree.R")
source("Infomap/infomap_communities.R")
#get_subj info here, includes motion exclusion procedure
subj_info <- get_subj_info(adjmats_base, parcellation, conn_method, preproc_pipeline, file_extension=".txt.gz")
